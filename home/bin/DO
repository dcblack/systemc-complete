#!/usr/bin/perl
eval 'exec perl -S $0 ${1+"$@"}'
  if 0;#running_under_some_shell;

my $HELPTEXT = q{
NAME
----
DO -- display and execute a command

SYNOPSIS
--------
DO [OPTIONS] <COMMAND>[ <ARGS>...]

DESCRIPTION
-----------
Displays an command with its arguments before executing them. Optionally can log everything.

OPTIONS
-------

  + -append -- append to logfile
  + -banner TEXT -- display a banner
  + -cd DIR
  + -color -- use color for output to aid visibility
  + -delay N -- delay N seconds before executing (default 0)
  + -help -- elicits this text
  + -logfile FILE -- create logfile
  + -nocolor -- suppress color
  + -notreally -- display but don't execute
  + -quiet -- no extra text
  + -verbose -- add extra text to aid understanding what's happening

ENVIRONMENT
-----------

The following environment variables can be set in place of command-line options to invoke the corresponding option.

  + COLOR
  + DELAY=N where N is the number of seconds to delay (must be greater than zero).
  + DO_BANNER
  + QUIET overrides VERBOSE
  + VERBOSE

EXAMPLES
--------

  DO pwd
  DO -logfile=hi.log -color -banner 'HI' echo 'Hello'

};

our $SQ=chr(39);
our $DQ=chr(34);
our %OPT;
$OPT{-delay}  = 0;# built-in default is immediate
$OPT{-delay}  = $ENV{DELAY} if exists $ENV{DELAY}   and $ENV{DELAY}>0;
$OPT{-color}  = 0;# built-in default is to be black-n-white
$OPT{-color}  = 1 if exists $ENV{COLOR}   and $ENV{COLOR}>0;
$OPT{-verbose}  = 1;# built-in default is to be verbose
$OPT{-verbose}  = 1 if exists $ENV{VERBOSE}   and $ENV{VERBOSE}>0;
$OPT{-verbose}  = 0 if exists $ENV{QUIET}     and $ENV{QUIET}>0;
$OPT{-banner} = $ENV{DO_BANNER} if exists $ENV{DO_BANNER} and $ENV{DO_BANNER}>0;
$OPT{-notreally} = $ENV{NOTREALLY} if exists $ENV{NOTREALLY};
while (@ARGV and $ARGV[0] =~ m{^-}) {
  my $arg = shift @ARGV;
  if ($arg =~ m{^-{1,2}(?:h|help)$}) {
    printf "%s\n", $HELPTEXT;
    exit 0;
  } elsif ($arg =~ m{^-{1,2}(?:a|append)=?}) {
    $OPT{-append} = 1;
    if ($arg =~ m{=}) {
      $OPT{-logfile} = $';
    } elsif (not exists $OPT{-logfile}) {
      $OPT{-logfile} = 'do.log';
      $OPT{-logfile} = $ENV{LOGFILE} if exists $ENV{LOGFILE} and $ENV{LOGFILE} ne '';
    }#endif
  } elsif ($arg =~ m{^-{1,2}(?:cd|C|d)$}) {
    chdir shift @ARGV;
  } elsif ($arg =~ m{^-{1,2}(?:banner|header)$}) {
    $OPT{-banner} = shift @ARGV;
  } elsif ($arg =~ m{^-{1,2}(?:c|color)$}) {
    $OPT{-color} = 1;
  } elsif ($arg =~ m{^-{1,2}(?:nc|nocolor)$}) {
    $OPT{-color} = 0;
  } elsif ($arg =~ m{^-{1,2}(?:n|notreally)$}) {
    $OPT{-notreally} = 1;
  } elsif ($arg =~ m{^-{1,2}(?:delay)$}) {
    $OPT{-delay} = shift @ARGV;
  } elsif ($arg =~ m{^-{1,2}(?:l|log|logfile)=?}) {
    if ($arg =~ m{=}) {
      $OPT{-logfile} = $';
    } elsif (not exists $OPT{-logfile}) {
      $OPT{-logfile} = 'do.log';
      $OPT{-logfile} = $ENV{LOGFILE} if exists $ENV{LOGFILE} and $ENV{LOGFILE} ne '';
    }#endif
  } elsif ($arg =~ m{^-{1,2}(?:q|quiet)$}) {
    $OPT{-quiet} = 1;
  } elsif ($arg =~ m{^-{1,2}(?:v|verbose)$}) {
    $OPT{-quiet} = 0;
  } elsif ($arg =~ m{^-(\d+)$}) {
    $OPT{-delay} = $1;
  }#endif
}#endwhile

sub opt($) { return (exists $OPT{$_[0]} and ($OPT{$_[0]} ne 0))?1:0; }

if (opt -logfile) {
  if (opt -append) {
    open STDLOG,">>",$OPT{-logfile};
    printf STDLOG "# Date: %s\n",scalar localtime if -s $OPT{-logfile} == 0;
  } else {
    open STDLOG,">",$OPT{-logfile};
    printf STDLOG "# Date: %s\n",scalar localtime;
  }#endif
}

my ($COLOR_RED
   ,$COLOR_GRN
   ,$COLOR_BLU
   ,$COLOR_BLK
   ,$COLOR_OFF
   ,$COLOR_BOLD
   ,$COLOR_UL
 ) = 
   ("\x1B[31;01m"
   ,"\x1B[32;01m"
   ,"\x1B[34;01m"
   ,"\x1B[30;01m"
   ,"\x1B[00m"
   ,"\x1B[01m"
   ,"\x1B[04m"
 );
 my ($HDR,$TAG,$CMD,$END) = ('','','','');
 if (opt -color) {
    ($HDR,$TAG,$CMD,$END) = ($COLOR_GRN,$COLOR_BLU,$COLOR_BLK,$COLOR_OFF);
 }

if (opt -banner and opt -verbose) {
  printf "%s\n",('-' x 78);
  system('header',$OPT{-banner});
  printf "%s\n",('-' x 78);
}#endif
my @ARGS = @ARGV;
my $cmd = $ARGV[0];
for my $arg (@ARGS[1..$#ARGV]) {
  if ($arg =~ m{[\\\$\s $DQ\{\}()\[\]]} or not($arg =~ m{^-} or $arg =~ m{^\d+$} or $arg =~ m{/} or -e $arg)) {
    $arg = qq{'$arg'};
  } elsif ($arg =~ m{'}) {
    $arg = qq{\"$arg\"};
  }#endif
  $cmd .= " $arg";
}#endfor

# Display & Execute
printf "%s%% %s%s%s\n",$TAG,$CMD,join(' ',@ARGS),$END if opt -verbose;
exit 0 if opt -notreally;
printf STDLOG "%s%% %s%s%s\n",$TAG,$CMD,join(' ',@ARGS),$END if opt -logfile;
sleep $OPT{-delay} if opt -delay;
my $result = qx($cmd);
my $status = $?;
print $result;
print STDLOG $result if opt -logfile;
if ( $status != 0 ) {
  printf STDERR "${COLOR_RED}FAILURE (status=$status)${COLOR_OFF}\n";
  printf STDLOG "${COLOR_RED}FAILURE (status=$status)${COLOR_OFF}\n" if opt -logfile;
}#endif
exit $status;
