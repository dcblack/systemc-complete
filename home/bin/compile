#!/usr/bin/bash

#{
HELP=<<'HELP_TEXT'
## SYNOPSIS

Simple compile

## SYNTAX

```sh
compile [OPTIONS] [TARGET] [SOURCES]
```
 + Sources must have an extension (e.g. .cpp or .c)

## OPTIONS

 + `-W{flag} -D{name}={value} -I{dir} -L{dir} -l{lib} -help`
 + `-args=STRING` sets ARGS=STRING
 + `-opts` shows values of all options just prior to execution
 + `-llvm` or -gnu select the compiler tools (aka -clang or -gcc)
 + `-std=c++NN` selects the appropriate standard for C++ compilation
 + `-std=cNN` selects the appropriate standard for C compilation
 + `-n` suppresses actual execution and just displays what would have been attempted
 + `--nocolor` suppresses terminal coloring
 + `--nostrict` disallows -Wno-unused-parameter (see CHKS)
 + Other options take the form 'NAME=VALUE'

## TARGETS

The TARGET defaults to `compile link run`, which does exactly what it implies if possible.

If you wish to compile only or link only, you may do so by using one of those keywords.

Other targets are available including:

Target | Description
------ | -----------
clean  | Removes generated files (including log files)
opts   | Same as -opt option except it will bypass compile, link and run unless you specify one of those targets in addition

## VARIABLES

Additonal options maybe specified by using supported variable names followed by an equals symbol and a value. If spaces are needed, then the option should be surrounded with the appropriate quotations. See EXAMPLES section.

The following are occasionally modified:

Option | Description
------ | -----------
ARGS   | Command-line arguments passed to the executable
COPT   | Compiler optimization level (default O0)

The following are unusual to specify or modify. Many can be modified with ordinary command-line options above.

Option | Description
------ | -----------
BDIR   | Build directory (default ./build)
CC     | C compiler executable (e.g. clang or gcc)
CEXE   | Executable name (default run.x)
CHKS   | Compiler lint warnings (default --pedantic -Wall -Wextra -Wno-unused-parameter)
CLEAN  | List of files to clean (default everything generated)
CLOG   | Compilation log file (default ./compile.log)
CPPSTD | C++ standard as two digits (default 17)
CSTD   | C++ standard as two digits (default 11)
CXX    | C++ compiler executable (e.g. clang++ or g++)
DEBUG  | Debug compilation option (default -g)
DEFS   | C++ definitions (e.g. -DNDEBUG)
INCS   | Include directories (default -I.) -- SystemC added automatically
LIBD   | Library directories -- SystemC added automatically
LIBS   | Library names -- SystemC added automatically
LLOG   | Link log file (default ./link.log)
LOGS   | List of log files to remove when cleaning
ODIR   | Object directory (default $BDIR/obj.dir)
RLOG   | Run log file (default ./run.log)
SRCS   | Source files (default *.c *.cpp)
WARN   | Additional warnings or suppression
XDIR   | Executable directory (default .)

## EXAMPLES

+ Compile, link and run all files ending in `.cpp` and `.c` in the local directory.

```sh
compile
```

+ Compile and link all specified files.

```sh
compile --nostrict srcs/*.cpp
```

+ The following unusual example shows how to:

1. Ensures the default compiler is LLVM's clang++
2. Turns off debug symbol generation (not recommended)
3. Replaces checks to remove -Wextra (not recommended)
4. Change the C++ filename extension to `.cxx` instead of the default `.cpp`

```sh
compile CXX=clang++ DEBUG= CHKS='--pedantic -Wall' CPPEXT=cxx my.cxx
```

+ Remove compile & link log files, but not run.

```sh
compile LOGS='compile.log link.log' clean
```

## DEPENDENCIES

DO perl fgrep sed basename mkdir test

HELP_TEXT
#}

function Realpath () {
  test -z "$*" && echo "" || \
  perl '-MCwd(abs_path)' -le "print abs_path(qq($*))"
}

let ERRORS=0
declare -a KNOWN_LIST=(
  CPPEXT SRCS   BDIR   ODIR   XDIR   CC     CXX    COPT   CSTD   CPPSTD 
  CHKS   INCS   DEFS   DEBUG  CEXE   LIBD   LIBS   LIBF   EXEC   
  MNRE   CLOG   LLOG   RLOG   LOGS   CLEAN  NOTREALLY     SCC_DEBUG STRICT NOCOLOR
)  
declare -A IS_KNOWN=()
for var in ${KNOWN_LIST[@]}; do
  IS_KNOWN[$var]=1
done
declare -A ASKED=()
declare -a OTHERS=()

function Append() {
  local var=$1
  shift
  local val="$*"
  local old
  if [[ -z $var ]]; then
    eval "$var='$val'"
  else
    eval "old='$var'"
    eval "$var='$old $val'"
  fi
}

function AddOpt() {
  local v
  for v in "$@"; do
    if [[ -z ${ASKED[$v]} && -z ${IS_KNOWN[$v]} ]]; then
      OTHERS+=( $v )
    fi
    ASKED[$v]=1
  done
}

# Parse supplied options (override defaults)
while [[ $# != 0  ]]; do
  if [[ "$1" =~ ^--?h(elp)?$ ]]; then
    echo $HELP
    exit 0
  elif [[ "$1" =~ ^--?debug$ ]]; then
    SCC_DEBUG=1
    AddOpt SCC_DEBUG
  elif [[ "$1" =~ ^--?dump$ ]]; then
    dump=1
  elif [[ "$1" =~ ^--?opts$ ]]; then
    showopts=1
  elif [[ "$1" =~ ^-n$ ]]; then
    NOTREALLY=1
    AddOpt NOTREALLY
  elif [[ "$1" =~ ^--?(gcc|gnu)$ ]]; then
    AddOpt CXX CC
    CXX=g++
    CC=gcc
  elif [[ "$1" =~ ^--?(clang|llvm)$ ]]; then
    AddOpt CXX CC
    CXX=clang++
    CC=clang
  elif [[ "$1" =~ ^-std=c++.* ]]; then
    val=$(echo "$1"|sed -e 's/^-std=c++//')
    AddOpt CPPSTD
    CPPSTD=$val
  elif [[ "$1" =~ ^-std=c.* ]]; then
    val=$(echo "$1"|sed -e 's/^-std=c//')
    AddOpt CSTD
    CSTD=$val
  elif [[ "$1" =~ ^-W.* ]]; then
    opt="$1"
    Append WARN "$opt"
    AddOpt WARN
  elif [[ "$1" =~ ^-D.* ]]; then
    opt="$1"
    Append DEFS "$opt"
    AddOpt DEFS
  elif [[ "$1" =~ ^-I.* ]]; then
    if [[ "$1" == "-I" ]]; then
      opt="-I $2"
      shift
    else
      opt="$1"
    fi
    if [[ "$INCS" == "" ]]; then
      opt="-I. $opt"
    fi
    INCS+=" $opt"
    AddOpt INCS
  elif [[ "$1" =~ ^-L.* ]]; then
    if [[ "$1" == "-L" ]]; then
      opt="-L $2"
      shift
    else
      opt="$1"
    fi
    Append LIBD "$opt"
    AddOpt LIBD
  elif [[ "$1" =~ ^-l.* ]]; then
    if [[ "$1" == "-l" ]]; then
      opt="-l $2"
      shift
    else
      opt="$1"
    fi
    Append LIBS "$opt"
    AddOpt LIBS
  elif [[ "$1" =~ ^--nostrict$ ]]; then
    STRICT=0
    AddOpt STRICT
  elif [[ "$1" =~ ^--nocolor$ ]]; then
    NOCOLOR=1
  elif [[ "$1" =~ ^[a-z]+$ ]]; then
    Append TARG "$1"
  elif [[ "$1" =~ ^[A-Za-z][A-Za-z0-9_]*= ]]; then
    var=$(echo $1|sed -e 's/=.*//')
    val="$(echo $1|sed -e 's/^[^=][^=]*=//')"
    AddOpt $var
    eval "$var='$val'"
  elif [[ "$1" =~ .+[.][^./]+$ ]]; then
    if [[ -r "$1" ]]; then
      Append SRCS "$1"
      AddOpt SRCS
    else
      echo "ERROR: Source file unreadable '$1'" 1>&2
      let ++ERRORS
    fi
  else
    echo "ERROR: Unknown option '$1'" 1>&2
    let ++ERRORS
  fi
  shift
done
while [[ "$1" =~ .*=.* ]]; do
  eval "export \"$1\""
  shift
done
if [[ $ERRORS != 0 ]]; then
  echo "Please fix errors above and try again. For more details use -help" 1>&2
  exit 1
fi

if [[ "$TARG" == "" ]]; then
  TARG=run
fi

# Create OPTS
declare -a OPTS=()
for var in ${KNOWN_LIST[@]}; do
  if [[ ${ASKED[$var]} == 1 ]]; then
    val="$(eval 'echo $'$var)"
    OPTS+="$var='$val'"
  fi
done
for var in ${OTHERS[@]}; do
  val="$(eval 'echo $'$var)"
  OPTS+="$var='$val'"
done

# Dump for debugging this script
if [[ "$dump" == 1 ]]; then
  printf "Dumping compile script internals:"
  printf "OPTS={%s}\n" "$OPTS"
  for opt in ${OPTS[@]}; do
    if [[ $opt =~ ^[A-Z][A-Za-z0-9_]*= ]]; then
      printf "\n  %s" "$opt"
    else
      printf "%s" " $opt"
    fi
  done
  printf "\n";
  printf "  TARG=%s\n"   "$TARG"
  printf "  OTHERS=%s\n" "$OTHERS"
  printf "#--------------------\n"
  exit 0
fi

# Create script file
TIMESTAMP=$(date '+%Y%m%d%H%M%S')
COMPILE_SCRIPT="build/script.dir/compile-${TIMESTAMP}.sh"
mkdir -p $(dirname ${COMPILE_SCRIPT})
echo '#!'$(Realpath $SHELL) >$COMPILE_SCRIPT
echo '' >>$COMPILE_SCRIPT

# Show options if requested
if [[ "$showopts" == 1 ]]; then
  echo "make -f $SCC_APPS/make/Makefile.defs ${OPTS@} opts" >> $COMPILE_SCRIPT
fi

echo "% make -f $SCC_APPS/make/Makefile.defs ${OPTS[@]} $TARG"
echo   "make -f $SCC_APPS/make/Makefile.defs ${OPTS[@]} $TARG" >> $COMPILE_SCRIPT

( source $COMPILE_SCRIPT )

exit $?
