#!/usr/bin/env bash

MARKDOWN=<<'#!sh' #<!-- { -->
## SYNOPSIS

compile simplifies C/C++ compile, link and execute

## SYNTAX

```sh
compile [OPTIONS] [TARGET] [SOURCE_FILES]
```
 + Source files must have an extension (e.g. .cpp or .c)

## OPTIONS

 + `-W{flag} -D{name}={value} -I{dir} -L{dir} -l{lib} -help`
 + `-args=STRING` sets ARGS=STRING
 + `-dump` dumps options as an aid to debugging this script
 + `-f=MAKEFILE` specifies alternate makefile from defaults
 + `-opts` shows values of all options just prior to execution
 + `-llvm` or -gnu select the compiler tools (aka -clang or -gcc)
 + `-std=c++NN` selects the appropriate standard for C++ compilation
 + `-std=cNN` selects the appropriate standard for C compilation
 + `-n` suppresses actual execution and just displays what would have been attempted
 + `--nocolor` suppresses terminal coloring
 + `--nostrict` disallows -Wno-unused-parameter (see CHKS)
 + `--selftest` (or `-st`) followed by a source file name adds uppercase -D{:NAME:}_SELFTEST
 + Other options take the form 'NAME=VALUE'

## TARGETS

The TARGET defaults to `compile link run`, which does exactly what it implies if possible.

If you wish to compile only or link only, you may do so by using one of those keywords.

Other targets are available including:

| Target | Description |
| ------ | ----------- |
| clean  | Removes generated files (including log files) |
| opts   | Same as -opt option except it will bypass compile, link and run unless you specify one of those targets in addition |

## VARIABLES

Additonal options maybe specified by using supported variable names followed by an equals symbol and a value. If spaces are needed, then the option should be surrounded with the appropriate quotations. See EXAMPLES section.

The following are occasionally modified:

Option | Description
------ | -----------
ARGS   | Command-line arguments passed to the executable
COPT   | Compiler optimization level (default O0)

The following are unusual to specify or modify. Many can be modified with ordinary command-line options above.

Option | Description
------ | -----------
BDIR   | Build directory (default `./build`)
CC     | C compiler executable (e.g. `clang` or `gcc`)
CEXE   | Executable name (default run.x)
CHKS   | Compiler lint warnings (default --pedantic -Wall -Wextra -Wno-unused-parameter)
CLEAN  | List of files to clean (default everything generated)
CLOG   | Compilation log file basename (default `compile`)
CPPSTD | C++ standard as two digits (default 17)
CSTD   | C++ standard as two digits (default 11)
CXX    | C++ compiler executable (e.g. `clang++` or `g++`)
DEBUG  | Debug compilation option (default `-g`)
DEFS   | C++ definitions (e.g. `-DNDEBUG`)
ELOG   | Error log file (default `$BDIR/log.dir/error.log`)
INCS   | Include directories (default `-I.`) -- SystemC added automatically
LIBD   | Library directories -- SystemC added automatically
LIBS   | Library names -- SystemC added automatically
LLOG   | Link log file (default `$BDIR/log.dir/link.log`)
LOGS   | List of log files to remove when cleaning
ODIR   | Object directory (default `$BDIR/obj.dir`)
RLOG   | Run log file (default `$BDIR/log.dir/run.log`)
SRCS   | Source files (default `*.c` or `*.cpp`)
WARN   | Additional warnings or suppression
XDIR   | Executable directory (default `.`)

## EXAMPLES

+ Compile, link and run all files ending in `.cpp` and `.c` in the local directory.

```sh
compile
```

+ Compile and link all specified files.

```sh
compile --nostrict srcs/*.cpp
```

+ The following unusual example shows how to:

1. Ensures the default compiler is LLVM's clang++
2. Turns off debug symbol generation (not recommended)
3. Replaces checks to remove -Wextra (not recommended)
4. Change the C++ filename extension to `.cxx` instead of the default `.cpp`

```sh
compile CXX=clang++ DEBUG= CHKS='--pedantic -Wall' CPPEXT=cxx my.cxx
```

+ Remove compile & link log files, but not run.

```sh
compile LOGS='compile.log link.log' clean
```

## DEPENDENCIES

DO perl fgrep sed basename mkdir test

<!-- } -->
```sh
#!sh

function Realpath () {
  test -z "$*" && echo "" || \
  perl '-MCwd(abs_path)' -le "print abs_path(qq($*))"
}

let ERRORS=0
SCC_SELFTEST=
declare -a KNOWN_LIST=(
  CPPEXT SRCS   BDIR   ODIR   XDIR   CC     CXX    COPT   CSTD   CPPSTD 
  CHKS   INCS   DEFS   DEBUG  CEXE   LIBD   LIBS   LIBF   EXEC   
  MNRE   CLOG   LLOG   RLOG   LOGS   CLEAN  NOTREALLY     SCC_DEBUG STRICT NOCOLOR
)  

SCC_MAKE="$SCC_APPS/make/Makefile.defs"
# Allow local makefile override
for f in GNUmakefile Makefile makefile; do
  if [[ -r "$f" ]]; then
    SCC_MAKE="$f"
    echo "INFO: Using local $f"
    break
  fi
done


declare -A IS_KNOWN=()
for var in ${KNOWN_LIST[@]}; do
  IS_KNOWN[$var]=1
done
declare -A ASKED=()
declare -a OTHERS=()

function Append() {
  local var=$1
  shift
  local val="$*"
  local old
  eval "old=\"\$$var\""
  if [[ -z $old ]]; then
    eval "$var='$val'"
  else
    eval "$var='$old $val'"
  fi
}

function AddOpt() {
  local v
  for v in "$@"; do
    if [[ -z ${ASKED[$v]} && -z ${IS_KNOWN[$v]} ]]; then
      OTHERS+=( $v )
    fi
    ASKED[$v]=1
  done
}

# Parse supplied options (override defaults)
while [[ $# != 0  ]]; do
  if [[ "$1" =~ ^--?h(elp)?$ ]]; then
    if which typora >/dev/null 2>&1; then
      typora $0
    elif which retext >/dev/null 2>&1; then
      retext $0
    elif which lynx >/dev/null 2>&1; then
      if which pandoc >/dev/null 2>&1; then
        pandoc -f gfm -t html $0 | lynx -stdin
      elif which markdown >/dev/null 2>&1; then
        markdown $0 | lynx -stdin
      else
        printf "%s\n" $MARKDOWN
      fi
    else
      printf "%s\n" $MARKDOWN
    fi
    exit 0
  elif [[ "$1" =~ ^--?debug$ ]]; then
    SCC_DEBUG=1
    AddOpt SCC_DEBUG
  elif [[ "$1" =~ ^--?dump$ ]]; then
    dump=1; # Internal debugging
  elif [[ "$1" =~ ^--?opts$ ]]; then
    showopts=1
  elif [[ "$1" =~ ^--?f=? ]]; then
    if [[ "$1" == "-f" ]]; then
      opt="$2"
      shift
    else
      opt="$(echo $1|sed -e s/^[^=]+=//)"
    fi
    SCC_MAKE="$opt"
  elif [[ "$1" =~ ^--?(selftest|st)$ ]]; then
    opt="$2"
    shift;
    if [[ -s "$SCC_SELFTEST" ]]; then
      echo "ERROR: Already specified $SCC_SELFTEST." 1>&2
      let ++ERRORS
    fi
    if [[ "$opt" =~ ^[^.]+$ ]]; then
      opt=$opt.cpp
    fi
    if [[ ! -r "$opt" ]]; then
      echo "ERROR: '$opt' does not correspond to a valid source file for selftest." 1>&2
      let ++ERRORS
    fi
    SCC_SELFTEST="$(echo $opt|tr a-z A-Z|sed -e s/[.].*/_SELFTEST/)"
    Append SRCS "$opt"
    AddOpt SRCS
    Append DEFS "-D${SCC_SELFTEST}"
    AddOpt DEFS
  elif [[ "$1" =~ ^-n$ ]]; then
    NOTREALLY=1
    AddOpt NOTREALLY
  elif [[ "$1" =~ ^--?(gcc|gnu)$ ]]; then
    AddOpt CXX CC
    CXX=g++
    CC=gcc
  elif [[ "$1" =~ ^--?(clang|llvm)$ ]]; then
    AddOpt CXX CC
    CXX=clang++
    CC=clang
  elif [[ "$1" =~ ^-std=c++.* ]]; then
    val=$(echo "$1"|sed -e 's/^-std=c++//')
    AddOpt CPPSTD
    CPPSTD=$val
  elif [[ "$1" =~ ^-std=c.* ]]; then
    val=$(echo "$1"|sed -e 's/^-std=c//')
    AddOpt CSTD
    CSTD=$val
  elif [[ "$1" =~ ^-W.* ]]; then
    opt="$1"
    Append WARN "$opt"
    AddOpt WARN
  elif [[ "$1" =~ ^-D.* ]]; then
    opt="$1"
    Append DEFS "$opt"
    AddOpt DEFS
  elif [[ "$1" =~ ^-I.* ]]; then
    if [[ "$1" == "-I" ]]; then
      opt="-I $2"
      shift
    else
      opt="$1"
    fi
    if [[ "$INCS" == "" ]]; then
      opt="-I. $opt"
    fi
    INCS+=" $opt"
    AddOpt INCS
  elif [[ "$1" =~ ^-L.* ]]; then
    if [[ "$1" == "-L" ]]; then
      opt="-L $2"
      shift
    else
      opt="$1"
    fi
    Append LIBD "$opt"
    AddOpt LIBD
  elif [[ "$1" =~ ^-l.* ]]; then
    if [[ "$1" == "-l" ]]; then
      opt="-l $2"
      shift
    else
      opt="$1"
    fi
    Append LIBS "$opt"
    AddOpt LIBS
  elif [[ "$1" =~ ^--nostrict$ ]]; then
    STRICT=0
    AddOpt STRICT
  elif [[ "$1" =~ ^--nocolor$ ]]; then
    NOCOLOR=1
  elif [[ "$1" =~ ^[a-z]+$ ]]; then
    Append TARG "$1"
  elif [[ "$1" =~ ^[A-Za-z][A-Za-z0-9_]*= ]]; then
    var=$(echo $1|sed -e 's/=.*//')
    val="$(echo $1|sed -e 's/^[^=][^=]*=//')"
    AddOpt $var
    eval "$var='$val'"
  elif [[ "$1" =~ .+[.][^./]+$ ]]; then
    if [[ -r "$1" ]]; then
      Append SRCS "$1"
      AddOpt SRCS
    else
      echo "ERROR: Source file unreadable '$1'" 1>&2
      let ++ERRORS
    fi
  else
    echo "ERROR: Unknown option '$1'" 1>&2
    let ++ERRORS
  fi
  shift
done
while [[ "$1" =~ .*=.* ]]; do
  eval "export \"$1\""
  shift
done
if [[ $ERRORS != 0 ]]; then
  echo "Please fix errors above and try again. For more details use -help" 1>&2
  exit 1
fi

if [[ "$TARG" == "" ]]; then
  TARG=run
fi

# Create OPTS
declare -a OPTS=()
for var in ${KNOWN_LIST[@]}; do
  if [[ ${ASKED[$var]} == 1 ]]; then
    val="$(eval 'echo $'$var)"
    OPTS+=" $var='$val'"
  fi
done
for var in ${OTHERS[@]}; do
  val="$(eval 'echo $'$var)"
  OPTS+=" $var='$val'"
done

# Create script file
TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
COMPILE_SCRIPT="build/script.dir/compile-${TIMESTAMP}.sh"
mkdir -p $(dirname ${COMPILE_SCRIPT})
printf "#!%s\n" "$(Realpath $SHELL)" >$COMPILE_SCRIPT
printf "#\n# Created %s\n\n" "$(date)" >>$COMPILE_SCRIPT
chmod a+rx $COMPILE_SCRIPT

# Show options if requested
if [[ "$showopts" == 1 ]]; then
  printf "make -f %s %s opts\n" "$SCC_MAKE" "${OPTS[@]}" >> $COMPILE_SCRIPT
fi

printf "%% make -f %s %s %s\n" "$SCC_MAKE" "${OPTS[@]}" "$TARG"
printf    "make -f %s %s %s\n" "$SCC_MAKE" "${OPTS[@]}" "$TARG" >> $COMPILE_SCRIPT

printf "\n# The end\n" >>$COMPILE_SCRIPT

# Dump for debugging this script
if [[ "$dump" == 1 ]]; then
  printf "Dumping compile script internals:"
  printf "OPTS={%s}\n" "$OPTS"
  for opt in ${OPTS[@]}; do
    if [[ $opt =~ ^[A-Z][A-Za-z0-9_]*= ]]; then
      printf "\n  %s" "$opt"
    else
      printf "%s" " $opt"
    fi
  done
  printf "\n";
  printf "  SCC_MAKE=%s\n" "$SCC_MAKE"
  printf "  TARG=%s\n"     "$TARG"
  printf "  OTHERS=%s\n"   "$OTHERS"
  D10="----------" D80="$D10$D10$D10$D10$D10$D10$D10$D10"
  printf "%80.80s\n" "#-- $COMPILE_SCRIPT $D80"
  cat $COMPILE_SCRIPT
  printf "#%80.80s\n" "$D80"
  exit 0
fi

( source $COMPILE_SCRIPT )

exit $?

#\
```
